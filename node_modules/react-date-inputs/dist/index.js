var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { default as React, useEffect, useRef, useState } from 'react';
import { getDate, getMonth, getYear } from 'date-fns';
import { Unit } from './types';
import { daysInMonth, getCappedUnits, isValid } from './utils/date';
export var BASE_CLASS = 'react-date-inputs';
var DefaultInputComponent = React.forwardRef(function (props, ref) { return (React.createElement("input", __assign({}, props, { ref: ref }))); });
DefaultInputComponent.displayName = 'DefaultInputComponent';
var DefaultLabelComponent = function (props) { return React.createElement("label", __assign({}, props)); };
export var DateInputs = function (_a) {
    var _b, _c, _d;
    var value = _a.value, onChange = _a.onChange, onBlur = _a.onBlur, _e = _a.dayPlaceholder, dayPlaceholder = _e === void 0 ? 'DD' : _e, _f = _a.monthPlaceholder, monthPlaceholder = _f === void 0 ? 'MM' : _f, _g = _a.yearPlaceholder, yearPlaceholder = _g === void 0 ? 'YYYY' : _g, className = _a.className, label = _a.label, _h = _a.disabled, disabled = _h === void 0 ? false : _h, _j = _a.inputComponent, InputComponent = _j === void 0 ? DefaultInputComponent : _j, _k = _a.labelComponent, LabelComponent = _k === void 0 ? DefaultLabelComponent : _k, _l = _a.inputComponentProps, inputComponentProps = _l === void 0 ? {} : _l, _m = _a.labelComponentProps, labelComponentProps = _m === void 0 ? {} : _m, _o = _a.show, show = _o === void 0 ? ['day', 'month', 'year'] : _o, _p = _a.autoTab, autoTab = _p === void 0 ? false : _p;
    var dayInputRef = useRef(null);
    var monthInputRef = useRef(null);
    var yearInputRef = useRef(null);
    var refs = (_b = {},
        _b[Unit.day] = dayInputRef,
        _b[Unit.month] = monthInputRef,
        _b[Unit.year] = yearInputRef,
        _b);
    var placeholders = (_c = {},
        _c[Unit.day] = dayPlaceholder,
        _c[Unit.month] = monthPlaceholder,
        _c[Unit.year] = yearPlaceholder,
        _c);
    var _q = useState((_d = {},
        _d[Unit.day] = getDate(value) || undefined,
        _d[Unit.month] = getMonth(value) + 1 || undefined,
        _d[Unit.year] = getYear(value) || undefined,
        _d)), parsedValues = _q[0], setParsedValues = _q[1];
    useEffect(function () {
        var _a = parsedValues.day, day = _a === void 0 ? show.includes(Unit.day) ? undefined : 1 : _a, _b = parsedValues.month, month = _b === void 0 ? show.includes(Unit.month) ? undefined : 1 : _b, _c = parsedValues.year, year = _c === void 0 ? show.includes(Unit.year) ? undefined : 2020 : _c;
        var isInitial = day === getDate(value) &&
            month === getMonth(value) + 1 &&
            year === getYear(value);
        if (onChange && !isInitial) {
            if (day === undefined || month === undefined || year === undefined) {
                onChange(undefined);
            }
            else if (isValid(day, month, year) && year.toString().length === 4) {
                onChange(new Date(year, month - 1, day));
            }
            else {
                onChange(undefined);
            }
        }
    }, [parsedValues]);
    var handleAutoFocus = function (_a, unit) {
        var _b;
        var day = _a.day, month = _a.month, year = _a.year;
        var maxDays = month ? daysInMonth(month, year) : 31;
        var currentIndex = show.indexOf(unit);
        var nextUnit = show[currentIndex + 1];
        if (!nextUnit)
            return;
        var goToNext = (unit === Unit.day && parseInt(day + '1', 10) > maxDays) ||
            (unit === Unit.month && parseInt(month + '1', 10) > 12) ||
            (unit === Unit.year && (year === null || year === void 0 ? void 0 : year.toString().length) === 4);
        if (goToNext)
            (_b = refs[nextUnit].current) === null || _b === void 0 ? void 0 : _b.select();
    };
    var handleChange = function (e, unit) {
        var _a;
        var val = parseInt(e.target.value, 10);
        var newUnitValue = val >= 0 ? val : undefined;
        var newParsedValues = __assign(__assign({}, parsedValues), (_a = {}, _a[unit] = newUnitValue, _a));
        var cappedValues = getCappedUnits(newParsedValues);
        if (autoTab)
            handleAutoFocus(newParsedValues, unit);
        setParsedValues(cappedValues);
    };
    var handleGroupBlur = function (e) {
        var currentTarget = e.currentTarget;
        setTimeout(function () {
            if (!currentTarget.contains(document.activeElement))
                onBlur && onBlur(e);
        }, 0);
    };
    return (React.createElement("div", { className: "".concat(BASE_CLASS).concat(className ? " ".concat(className) : ''), "data-testid": BASE_CLASS },
        label && (React.createElement(LabelComponent, __assign({ className: "".concat(BASE_CLASS, "__label"), "data-testid": "".concat(BASE_CLASS, "__label") }, labelComponentProps), label)),
        React.createElement("div", { onBlur: handleGroupBlur, className: "".concat(BASE_CLASS, "__inputs-wrapper"), "data-testid": "".concat(BASE_CLASS, "__inputs-wrapper") }, show.map(function (unit) {
            var _a;
            return (React.createElement(InputComponent, __assign({ type: "text", pattern: "[0-9]*", key: unit, placeholder: placeholders[unit], onChange: function (e) { return handleChange(e, unit); }, value: (_a = parsedValues[unit]) !== null && _a !== void 0 ? _a : '', className: "".concat(BASE_CLASS, "__").concat(unit), "data-testid": "".concat(BASE_CLASS, "__").concat(unit), ref: refs[unit], disabled: disabled, maxLength: unit == Unit.year ? '4' : '2' }, inputComponentProps)));
        }))));
};
export default DateInputs;
//# sourceMappingURL=index.js.map