var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { render, fireEvent,
//  fireEvent, waitForElement
 } from '@testing-library/react';
import DateInputs, { BASE_CLASS } from '../index';
// import {DateInputsProps} from "../types";
describe('<DateInputs />', function () {
    test('should display three blank inputs', function () { return __awaiter(void 0, void 0, void 0, function () {
        var findByTestId, dayInput, monthInput, yearInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    findByTestId = render(React.createElement(DateInputs, { value: undefined })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__month"))];
                case 2:
                    monthInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__year"))];
                case 3:
                    yearInput = _a.sent();
                    expect(dayInput).toHaveValue('');
                    expect(monthInput).toHaveValue('');
                    expect(yearInput).toHaveValue('');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should populate inputs with correct date', function () { return __awaiter(void 0, void 0, void 0, function () {
        var date, findByTestId, dayInput, monthInput, yearInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    date = new Date(2020, 3, 20);
                    findByTestId = render(React.createElement(DateInputs, { value: date })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__month"))];
                case 2:
                    monthInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__year"))];
                case 3:
                    yearInput = _a.sent();
                    expect(dayInput).toHaveValue('20');
                    expect(monthInput).toHaveValue('4');
                    expect(yearInput).toHaveValue('2020');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should not allow entering invalid characters', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, dayInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    expect(dayInput).toHaveValue('');
                    fireEvent.change(dayInput, { target: { value: 'no bueno!' } });
                    expect(dayInput).toHaveValue('');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should allow entering the day', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, dayInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    fireEvent.change(dayInput, { target: { value: '20' } });
                    expect(dayInput).toHaveValue('20');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should allow entering the month', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, monthInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__month"))];
                case 1:
                    monthInput = _a.sent();
                    fireEvent.change(monthInput, { target: { value: '4' } });
                    expect(monthInput).toHaveValue('4');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should allow entering the year', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, yearInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__year"))];
                case 1:
                    yearInput = _a.sent();
                    fireEvent.change(yearInput, { target: { value: '2020' } });
                    expect(yearInput).toHaveValue('2020');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should return undefined if one of the three inputs is empty', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, dayInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    fireEvent.change(dayInput, { target: { value: '20' } });
                    expect(onChange).toHaveBeenCalledWith(undefined);
                    return [2 /*return*/];
            }
        });
    }); });
    test('should return the date if all inputs are populated', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, dayInput, monthInput, yearInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__month"))];
                case 2:
                    monthInput = _a.sent();
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__year"))];
                case 3:
                    yearInput = _a.sent();
                    fireEvent.change(dayInput, { target: { value: '20' } });
                    expect(onChange).toHaveBeenCalledWith(undefined);
                    fireEvent.change(monthInput, { target: { value: '4' } });
                    expect(onChange).toHaveBeenCalledWith(undefined);
                    fireEvent.change(yearInput, { target: { value: '2020' } });
                    expect(onChange).toHaveBeenCalledWith(new Date(2020, 3, 20));
                    return [2 /*return*/];
            }
        });
    }); });
    test('should cap the days to 31 if no month and year are provided', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, dayInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    fireEvent.change(dayInput, { target: { value: '50' } });
                    expect(dayInput).toHaveValue('31');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should cap the days to the correct max amount if month and year are provided', function () { return __awaiter(void 0, void 0, void 0, function () {
        var date, onChange, findByTestId, dayInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    date = new Date(2018, 1, 20);
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange, value: date })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__day"))];
                case 1:
                    dayInput = _a.sent();
                    fireEvent.change(dayInput, { target: { value: '50' } });
                    expect(dayInput).toHaveValue('28');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should cap the months to 12', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, monthInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__month"))];
                case 1:
                    monthInput = _a.sent();
                    fireEvent.change(monthInput, { target: { value: '50' } });
                    expect(monthInput).toHaveValue('12');
                    return [2 /*return*/];
            }
        });
    }); });
    test('should allow custom input ordering', function () { return __awaiter(void 0, void 0, void 0, function () {
        var onChange, findByTestId, inputsWrapper;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    onChange = jest.fn();
                    findByTestId = render(React.createElement(DateInputs, { onChange: onChange, show: ['year', 'month', 'day'] })).findByTestId;
                    return [4 /*yield*/, findByTestId("".concat(BASE_CLASS, "__inputs-wrapper"))];
                case 1:
                    inputsWrapper = _a.sent();
                    expect(inputsWrapper.childNodes[0]).toHaveClass("".concat(BASE_CLASS, "__year"));
                    expect(inputsWrapper.childNodes[1]).toHaveClass("".concat(BASE_CLASS, "__month"));
                    expect(inputsWrapper.childNodes[2]).toHaveClass("".concat(BASE_CLASS, "__day"));
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=ReactDateInputs.spec.js.map